name: Run pytest tests

on:
  workflow_call:
    inputs:
      python-versions:
        description: 'Supported python versions'
        default: '["3.8", "3.9", "3.10", "3.11"]'
        required: false
        type: string
      postgresql:
        description: 'PostgreSQL version'
        required: true
        type: number
      os:
        description: 'Operating system to run tests on'
        default: 'ubuntu-latest'
        required: false
        type: string
    secrets:
      codecov_token:
        description: 'Codecov token'
        required: false

jobs:
  postgres:
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    env:
      OS: ${{ inputs.os }}
      PYTHON: ${{ matrix.python-version }}
      POSTGRES: ${{ inputs.postgresql }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ inputs.postgresql }}
      - name: Check installed locales
        run: |
          locale -a
      - name: update locale for tests
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: |
          sudo locale-gen de_DE.UTF-8
      - name: Run test
        uses: fizyk/actions-reuse/.github/actions/pipenv@v1.7.1
        with:
          python-version: ${{ matrix.python-version }}
          pipenv-install-options: "--skip-lock"
          command: py.test -svv -n 0 --postgresql-exec="/usr/lib/postgresql/${{ inputs.postgresql }}/bin/pg_ctl" -k "not docker" --cov-report=xml
      - name: Run xdist test
        uses: fizyk/actions-reuse/.github/actions/pipenv@v1.7.1
        with:
          python-version: ${{ matrix.python-version }}
          pipenv-install-options: "--skip-lock"
          command: py.test -n 1 --postgresql-exec="/usr/lib/postgresql/${{ inputs.postgresql }}/bin/pg_ctl" -k "not docker" --cov-report=xml:coverage-xdist.xml
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: postgresql-${{ matrix.python-version }}-${{ inputs.postgresql }}
          path: /tmp/pytest-of-runner/**
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{ secrets.codecov_token }}
          flags: unittests
          env_vars: OS,PYTHON
          fail_ci_if_error: false
